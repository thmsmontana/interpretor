package compiler;

import java.util.*;

import compiler.entities.*;
import java_cup.runtime.*;

parser code {:
    public static Scanner scanner = null;

    private boolean inMain = false;
    private Type returnType = null;
    
    public boolean isInMain() {
        return inMain;
    }

    public void setInMain(boolean inMain) {
        this.inMain = inMain;
    }

    public Type getReturnType() {
        return returnType;
    }
    
    public void setReturnType(Type type) {
        returnType = type;
    }
    
    public void syntax_error(Symbol cur_token) {
        System.out.println("ERROR: Syntax error on line " + scanner.getLine());
        System.exit(-2);
    }
    
    public static void main(String args[]) throws Exception {
        SymbolFactory sf = new DefaultSymbolFactory();
        scanner = (args.length == 0 ?
            new Scanner(System.in, sf) :
            new Scanner(new java.io.FileInputStream(args[0]), sf));
        new Parser(scanner, sf).parse();
    }
:}


/*******************************************************************************
 * TOKENS DEFINITION
 *******************************************************************************/

/* keywords */
terminal FUNCTION, MAIN, IF, ELSE, FOR, WHILE, RETURN, TRUE, FALSE, VOID, PRINT;

/* primitive types */
terminal T_BOOL, T_INT, T_FLOAT, T_STRING;

/* calculus operators */
terminal PLUS, MINUS, TIMES, DIV, MOD, EQUAL, EXCL;

/* comparison operators */
terminal LT, LE, GT, GE, EQ, NE, OR, AND, QUES;

/* separators */
terminal LBRACK, RBRACK, LPAR, RPAR, COLON, COMA, SEMI;

/* literals */
terminal Integer INT;
terminal Float FLOAT;
terminal String STRING;
terminal String IDENT;


/*******************************************************************************
 * GRAMMAR SYMBOLS
 *******************************************************************************/

non terminal program, parser_init, func_list, func_proto, main;
non terminal block, block_init, instr_list, instruction;

non terminal Expression declaration, func_type, type;
non terminal Expression init_opt, expr_opt, expression;
non terminal List<Expression> type_list, param_list;


/*******************************************************************************
 * OPERATORS PRIORITY
 *******************************************************************************/

precedence right EQUAL;
precedence right QUES, COLON;
precedence left OR;
precedence left AND;
precedence nonassoc EQ, NE;
precedence nonassoc LT, LE, GT, GE;
precedence left PLUS, MINUS;
precedence left TIMES, DIV, MOD;
precedence left EXCL;

precedence left ELSE; /* necessary to fix shift/reduce conflict on if-else statements */


/*******************************************************************************
 * GRAMMAR RULES
 *******************************************************************************/

program     ::= parser_init func_list main block
                {:
                    System.out.println("Syntax analysis: OK");
                    System.out.println("Type checking:   OK");
                    System.out.println("\n" + SymbolTable.getInstance().getFunctions().size() + " declared function(s)");
                :}
            ;

parser_init ::= /* empty */
                {:
                    SymbolTable.getInstance();
                :}
            ;

/* ### functions definition section ### */

func_list   ::= /* empty */
            |   func_list func_proto LBRACK instr_list RETURN expr_opt:e SEMI RBRACK
                {:
                    if (parser.getReturnType() != e) {
                        System.out.println("ERROR: Type mismatch on return statement (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);
                    }
                    
                    parser.setReturnType(null);
                    SymbolTable.getInstance().closeTopScope();
                :}
            ;

func_proto  ::= FUNCTION func_type:t IDENT:i LPAR RPAR
                {:
                    Function f = new Function(t, i);
                    try {
                        SymbolTable.getInstance().declareFunction(i, f);
                    } catch (Exception e) {
                        System.out.println("ERROR: " + e.getMessage() + " (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);
                    }
                    parser.setReturnType(t);
                    SymbolTable.getInstance().openNewScope();
                :}
            |   FUNCTION func_type:t IDENT:i LPAR type_list:l RPAR
                {:
                    Function f = new Function(t, i, l);
                    try {
                        SymbolTable.getInstance().declareFunction(i, f);
                    } catch (Exception e) {
                        System.out.println("ERROR: " + e.getMessage() + " (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);
                    }
                    parser.setReturnType(t);
                :}
            ;

func_type   ::= type:t
                {:
                    RESULT = t;
                :}
            |   VOID
                {:
                    RESULT = null;
                :}
            ;

type_list   ::= block_init type:t IDENT:i
                {:
                    try {
                        Expression expr = Expression.createParameter(t);
                        SymbolTable.getInstance().declareSymbol(i, expr);                    
                        RESULT = new ArrayList<Expression>();
                        RESULT.add(expr);
                    } catch (Exception e) {
                        System.out.println("ERROR: " + e.getMessage() + " (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);
                    }

                :}
            |   type_list:l COMA type:t IDENT:i
                {:
                    try {
                        Expression expr = Expression.createParameter(t);
                        SymbolTable.getInstance().declareSymbol(i, expr);  
                        RESULT = l;
                        RESULT.add(t);
                    } catch (Exception e) {
                        System.out.println("ERROR: " + e.getMessage() + " (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);
                    }
                :}
            ;

/* ### code definition section ### */

main        ::= MAIN
                {:
                    parser.setInMain(true);
                :}
            ;

block       ::= block_init LBRACK instr_list RBRACK
                {:
                    SymbolTable.getInstance().closeTopScope();
                :}
            ;

block_init  ::= /* empty */
                {:
                    SymbolTable.getInstance().openNewScope();
                :}
            ;

instr_list  ::= /* empty */
            |   instr_list instruction
            ;

instruction ::= block
            |   declaration SEMI
            |   expr_opt SEMI
            |   PRINT expression:e SEMI
                {:
                    System.out.println(e);
                :}
            |   RETURN expr_opt:e SEMI
                {:
                    if (parser.getReturnType() != e) {
                        System.out.println("ERROR: Type mismatch on return statement (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);
                    }
                :}
            |   IF LPAR expression:c RPAR instruction
                {:
                    if (c != Type.BOOLEAN) {
                        System.out.println("ERROR: if condition should be a boolean expression (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);
                    }
                :}
            |   IF LPAR expression:c RPAR instruction ELSE instruction
                {:
                    if (c != Type.BOOLEAN) {
                        System.out.println("ERROR: if condition should be a boolean expression (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);
                    }
                :}
            |   FOR LPAR declaration SEMI expr_opt:c SEMI expr_opt RPAR instruction
                {:
                    if (c != Type.BOOLEAN) {
                        System.out.println("ERROR: for condition should be a boolean expression (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);
                    }
                :}
            |   WHILE LPAR expression:c RPAR instruction
                {:
                    if (c != Type.BOOLEAN) {
                        System.out.println("ERROR: while condition should be a boolean expression (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);
                    }
                :}
            ;

declaration ::= type:t IDENT:i init_opt:e
                {:
                    try {
                        Expression expr =  Expression.createExpression(t, null);
                        expr.applyEQUAL(e);
                        SymbolTable.getInstance().declareSymbol(i,);
                    } catch (Exception ex) {
                        System.out.println("ERROR: " + ex.getMessage() + " (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);
                    }

                    RESULT = t;
                :}
            |   declaration:t COMA IDENT:i init_opt:e
                {:
                    try {
                        Expression expr =  Expression.createExpression(t, null);
                        expr.applyEQUAL(e);
                    } catch (Exception ex) {
                        System.out.println("ERROR: " + ex.getMessage() + " (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);
                    }
                    
                    RESULT = t;
                :}
            ;

type        ::= T_BOOL
                {:
                    RESULT = Type.BOOLEAN;
                :}
            |   T_INT
                {:
                    RESULT = Type.INTEGER;
                :}
            |   T_FLOAT
                {:
                    RESULT = Type.FLOAT;
                :}
            |   T_STRING
                {:
                    RESULT = Type.STRING;
                :}
            ;

init_opt    ::= /* empty */
                {:
                    RESULT = null;
                :}
            |   EQUAL expression:e
                {:
                    RESULT = e;
                :}
            ;

expr_opt    ::= /* empty */
                {:
                    RESULT = null;
                :}
            |   expression:e
                {:
                    RESULT = e;
                :}
            ;

expression  ::= IDENT:i init_opt:e
                {:
                    Type t = null;
                    try {
                        t = SymbolTable.getInstance().getType(i);
                    } catch (Exception ex) {
                        System.out.println("ERROR: " + ex.getMessage() + " (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);
                    }
                    
                    RESULT = t;
                :}
            |   LPAR expression:e RPAR
                {:
                    RESULT = e;
                :}
            |   EXCL expression:e
                {:
                    try {
                        RESULT = e.applyEXCL();
                    } catch (Exception e) {
                        System.out.println("ERROR: " + e.getMessage() + " (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);    
                    }
                :}
            |   expression:e1 OR expression:e2
                {:
                    try {
                        RESULT = e1.applyOR(e2);
                    } catch (Exception e) {
                        System.exit(-1);    
                    }
                :}
            |   expression:e1 AND expression:e2
                {:
                    try {
                        RESULT = e1.applyAND(e2);
                    } catch (Exception e) {
                        System.out.println("ERROR: " + e.getMessage() + " (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);    
                    }
                :}
            |   expression:e1 EQ expression:e2
                {:
                    try {
                        RESULT = e1.applyEQ(e2);
                    } catch (Exception e) {
                        System.out.println("ERROR: " + e.getMessage() + " (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);    
                    }
                :}
            |   expression:e1 NE expression:e2
                {:
                    try {
                        RESULT = e1.applyNE(e2);
                    } catch (Exception e) {
                        System.out.println("ERROR: " + e.getMessage() + " (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);    
                    }
                :}
            |   expression:e1 LT expression:e2
                {:
                    try {
                        RESULT = e1.applyLT(e2);
                    } catch (Exception e) {
                        System.out.println("ERROR: " + e.getMessage() + " (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);    
                    }
                :}
            |   expression:e1 LE expression:e2
                {:
                    try {
                        RESULT = e1.applyLE(e2);
                    } catch (Exception e) {
                        System.out.println("ERROR: " + e.getMessage() + " (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);    
                    }
                :}
            |   expression:e1 GT expression:e2
                {:
                    try {
                        RESULT = e1.applyGT(e2);
                    } catch (Exception e) {
                        System.out.println("ERROR: " + e.getMessage() + " (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);    
                    }
                :}
            |   expression:e1 GE expression:e2
                {:
                    try {
                        RESULT = e1.applyGE(e2);
                    } catch (Exception e) {
                        System.out.println("ERROR: " + e.getMessage() + " (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);    
                    }
                :}
            |   expression:e1 PLUS expression:e2
                {:
                    try {
                        RESULT = e1.applyPLUS(e2);
                    } catch (Exception e) {
                        System.out.println("ERROR: " + e.getMessage() + " (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);    
                    }
                :}
            |   expression:e1 MINUS expression:e2
                {:
                    try {
                        RESULT = e1.applyMINUS(e2);
                    } catch (Exception e) {
                        System.out.println("ERROR: " + e.getMessage() + " (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);    
                    }
                :}
            |   expression:e1 TIMES expression:e2
                {:
                    try {
                        RESULT = e1.applyTIMES(e2);
                    } catch (Exception e) {
                        System.out.println("ERROR: " + e.getMessage() + " (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);    
                    }
                :}
            |   expression:e1 DIV expression:e2
                {:
                    try {
                        RESULT = e1.applyDIV(e2);
                    } catch (Exception e) {
                        System.out.println("ERROR: " + e.getMessage() + " (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);    
                    }
                :}
            |   expression:e1 MOD expression:e2
                {:
                    try {
                        RESULT = e1.applyMOD(e2);
                    } catch (Exception e) {
                        System.out.println("ERROR: " + e.getMessage() + " (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);    
                    }
                :}
            |   MINUS expression:e
                {:
                    try {
                        RESULT = e1.applyMINUS();
                    } catch (Exception ex) {
                        System.out.println("ERROR: " + ex.getMessage() + " (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);    
                    }
                :} %prec EXCL
            |   expression:c QUES expression:ei COLON expression:ee
                {:
                    try {
                        RESULT = e1.applyQUES(ei, ee);
                    } catch (Exception ex) {
                        System.out.println("ERROR: " + ex.getMessage() + " (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);    
                    }
                :}
            |   TRUE
                {:
                    RESULT = new BooleanExpression(true);
                :}
            |   FALSE
                {:
                    RESULT = new BooleanExpression(false);
                :}
            |   INT:i
                {:
                    RESULT = new IntegerExpression(i);
                :}
            |   FLOAT:i
                {:
                    RESULT = new FloatExpression(i);
                :}
            |   STRING:i
                {:
                    RESULT = new StringExpression(i);
                :}
            ;

param_list  ::= IDENT:i
                {:
                    try {
                        Type t = SymbolTable.getInstance().getType(i);
                        RESULT = new ArrayList<Type>();
                        RESULT.add(t);
                    } catch (Exception e) {
                        System.out.println("ERROR: " + e.getMessage() + " (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);
                    }
                :}
            |   param_list:l COMA IDENT:i
                {:
                    try {
                        Type t = SymbolTable.getInstance().getType(i);
                        RESULT = l;
                        RESULT.add(t);
                    } catch (Exception e) {
                        System.out.println("ERROR: " + e.getMessage() + " (line " + Parser.scanner.getLine() + ")");
                        System.exit(-1);
                    }
                :}
            ;
